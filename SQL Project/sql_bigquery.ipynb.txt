{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using BigQuery to perform basic data analytics\n",
    "\n",
    "Here's a sample notebook of executing SQL commands in order to analyze some data, along with some basic visualization.\n",
    "\n",
    "We'll explore some data sets and reproduce how we might write queries for certain business problems."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# relevant installs\n",
    "# !pip install google-cloud \n",
    "# !pip install --upgrade google-cloud-bigquery[pandas] \n",
    "# !pip install google-cloud-storage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext google.cloud.bigquery"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "SERVICE_ACCOUNT= 'bq_jupyter'\n",
    "JSON_FILE_NAME = '../credentials/ds-portfolio-a04fdb631b73.json'\n",
    "GCP_PROJECT_ID = 'ds-portfolio'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import subprocess\n",
    "import sys\n",
    "import logging\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "\n",
    "logger = logging.Logger('catch_all')\n",
    "\n",
    "def run_command(parameters):\n",
    "    try:\n",
    "        # \"\"\"Prints and runs a command.\"\"\"\n",
    "        return subprocess.check_output(parameters)\n",
    "    except BaseException as e: \n",
    "       logger.error(e) \n",
    "       logger.error('ERROR: Looking in jupyter console for more information')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Queries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll be using the San Francisco Bikeshares dataset, which contains information around trips for the bikeshare program in San Francisco."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from google.cloud import bigquery\n",
    "\n",
    "client = bigquery.Client.from_service_account_json(JSON_FILE_NAME)\n",
    "\n",
    "def query_to_df(query):\n",
    "    # transfers query results to pandas dataframe for easy manipulating\n",
    "    return(client.query(query).result().to_dataframe())\n",
    "\n",
    "def get_schema(table):\n",
    "    # retreives the schema as a printed object\n",
    "    return(client.get_table(table).schema)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There's 4 different tables in this database. As a first step, we should look at the schema of all of these tables and see where we might be able to join for insight in future queries.\n",
    "\n",
    "The tables are...\n",
    "* bikeshare_regions\n",
    "* bikeshare_station_info\n",
    "* bikeshare_station_status\n",
    "* bikeshare_trips"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[SchemaField('region_id', 'INTEGER', 'REQUIRED', 'Unique identifier for the region', ()),\n",
       " SchemaField('name', 'STRING', 'REQUIRED', 'Public name for this region', ())]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#bikeshare_regions\n",
    "table = 'bigquery-public-data.san_francisco_bikeshare.bikeshare_regions'\n",
    "get_schema(table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[SchemaField('station_id', 'INTEGER', 'REQUIRED', 'Unique identifier of a station.', ()),\n",
       " SchemaField('name', 'STRING', 'REQUIRED', 'Public name of the station', ()),\n",
       " SchemaField('short_name', 'STRING', 'NULLABLE', 'Short name or other type of identifier, as used by the data publisher', ()),\n",
       " SchemaField('lat', 'FLOAT', 'REQUIRED', 'The latitude of station. The field value must be a valid WGS 84 latitude in decimal degrees format. See: http://en.wikipedia.org/wiki/World_Geodetic_System, https://en.wikipedia.org/wiki/Decimal_degrees', ()),\n",
       " SchemaField('lon', 'FLOAT', 'REQUIRED', 'The longitude of station. The field value must be a valid WGS 84 longitude in decimal degrees format. See: http://en.wikipedia.org/wiki/World_Geodetic_System, https://en.wikipedia.org/wiki/Decimal_degrees', ()),\n",
       " SchemaField('region_id', 'INTEGER', 'NULLABLE', 'ID of the region where station is located', ()),\n",
       " SchemaField('rental_methods', 'STRING', 'NULLABLE', 'Array of enumerables containing the payment methods accepted at this station.  Current valid values (in CAPS) are: KEY (i.e. operator issued bike key / fob / card) CREDITCARD PAYPASS APPLEPAY ANDROIDPAY TRANSITCARD ACCOUNTNUMBER PHONE This list is intended to be as comprehensive at the time of publication as possible but is subject to change, as defined in File Requirements above', ()),\n",
       " SchemaField('capacity', 'INTEGER', 'NULLABLE', 'Number of total docking points installed at this station, both available and unavailable', ()),\n",
       " SchemaField('external_id', 'STRING', 'NULLABLE', '', ()),\n",
       " SchemaField('rental_url', 'STRING', 'NULLABLE', '', ()),\n",
       " SchemaField('eightd_has_key_dispenser', 'BOOLEAN', 'NULLABLE', '', ()),\n",
       " SchemaField('has_kiosk', 'BOOLEAN', 'NULLABLE', '', ()),\n",
       " SchemaField('station_geom', 'GEOGRAPHY', 'NULLABLE', '', ())]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#bikeshare_station_info\n",
    "table = 'bigquery-public-data.san_francisco_bikeshare.bikeshare_station_info'\n",
    "get_schema(table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[SchemaField('station_id', 'INTEGER', 'REQUIRED', 'Unique identifier of a station', ()),\n",
       " SchemaField('num_bikes_available', 'INTEGER', 'REQUIRED', 'Number of bikes available for rental', ()),\n",
       " SchemaField('num_bikes_disabled', 'INTEGER', 'NULLABLE', 'Number of disabled bikes at the station. Vendors who do not want to publicize the number of disabled bikes or docks in their system can opt to omit station capacity (in station_information), num_bikes_disabled and num_docks_disabled. If station capacity is published then broken docks/bikes can be inferred (though not specifically whether the decreased capacity is a broken bike or dock)', ()),\n",
       " SchemaField('num_docks_available', 'INTEGER', 'REQUIRED', 'Number of docks accepting bike returns', ()),\n",
       " SchemaField('num_docks_disabled', 'INTEGER', 'NULLABLE', 'Number of empty but disabled dock points at the station. This value remains as part of the spec as it is possibly useful during development', ()),\n",
       " SchemaField('is_installed', 'BOOLEAN', 'REQUIRED', '1/0 boolean - is the station currently on the street', ()),\n",
       " SchemaField('is_renting', 'BOOLEAN', 'REQUIRED', '1/0 boolean - is the station currently renting bikes (even if the station is empty, if it is set to allow rentals this value should be 1)', ()),\n",
       " SchemaField('is_returning', 'BOOLEAN', 'REQUIRED', '1/0 boolean - is the station accepting bike returns (if a station is full but would allow a return if it was not full then this value should be 1)', ()),\n",
       " SchemaField('last_reported', 'INTEGER', 'REQUIRED', 'Integer POSIX timestamp indicating the last time this station reported its status to the backend', ()),\n",
       " SchemaField('num_ebikes_available', 'INTEGER', 'NULLABLE', '', ()),\n",
       " SchemaField('eightd_has_available_keys', 'BOOLEAN', 'NULLABLE', '', ())]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#bikeshare_station_status\n",
    "table = 'bigquery-public-data.san_francisco_bikeshare.bikeshare_station_status'\n",
    "get_schema(table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[SchemaField('trip_id', 'INTEGER', 'REQUIRED', 'Numeric ID of bike trip', ()),\n",
       " SchemaField('duration_sec', 'INTEGER', 'NULLABLE', 'Time of trip in seconds', ()),\n",
       " SchemaField('start_date', 'TIMESTAMP', 'NULLABLE', 'Start date of trip with date and time, in PST', ()),\n",
       " SchemaField('start_station_name', 'STRING', 'NULLABLE', 'Station name of start station', ()),\n",
       " SchemaField('start_station_id', 'INTEGER', 'NULLABLE', 'Numeric reference for start station', ()),\n",
       " SchemaField('end_date', 'TIMESTAMP', 'NULLABLE', 'End date of trip with date and time, in PST', ()),\n",
       " SchemaField('end_station_name', 'STRING', 'NULLABLE', 'Station name for end station', ()),\n",
       " SchemaField('end_station_id', 'INTEGER', 'NULLABLE', 'Numeric reference for end station', ()),\n",
       " SchemaField('bike_number', 'INTEGER', 'NULLABLE', 'ID of bike used', ()),\n",
       " SchemaField('zip_code', 'STRING', 'NULLABLE', 'Home zip code of subscriber (customers can choose to manually enter zip at kiosk however data is unreliable)', ()),\n",
       " SchemaField('subscriber_type', 'STRING', 'NULLABLE', 'Subscriber = annual or 30-day member; Customer = 24-hour or 3-day member', ()),\n",
       " SchemaField('c_subscription_type', 'STRING', 'NULLABLE', '', ()),\n",
       " SchemaField('start_station_latitude', 'FLOAT', 'NULLABLE', '', ()),\n",
       " SchemaField('start_station_longitude', 'FLOAT', 'NULLABLE', '', ()),\n",
       " SchemaField('end_station_latitude', 'FLOAT', 'NULLABLE', '', ()),\n",
       " SchemaField('end_station_longitude', 'FLOAT', 'NULLABLE', '', ()),\n",
       " SchemaField('member_birth_year', 'INTEGER', 'NULLABLE', '', ()),\n",
       " SchemaField('member_gender', 'STRING', 'NULLABLE', '', ()),\n",
       " SchemaField('bike_share_for_all_trip', 'STRING', 'NULLABLE', '', ()),\n",
       " SchemaField('start_station_geom', 'GEOGRAPHY', 'NULLABLE', '', ()),\n",
       " SchemaField('end_station_geom', 'GEOGRAPHY', 'NULLABLE', '', ())]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#bikeshare_trips\n",
    "table = 'bigquery-public-data.san_francisco_bikeshare.bikeshare_trips'\n",
    "get_schema(table)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So when we take a look at the schemas, we can see that each table gives us some different information. A few things that jump out:\n",
    "* We get some interesting information from the `station_info` table regarding payment types. It could be interesting to look if stations with different payment types are associated with more or less rides.\n",
    "* The `bikeshare_trips` table will give us information around ride-by-ride stats and has unique identifiers around customers/members that use them.\n",
    "    * We have additional information for members, but not for customers\n",
    "    * This will allow us to take a look at where popular routes might be\n",
    "    \n",
    "At this point, we can probably start looking at doing some queries for some explorative work, and seeing where we might be able to answer questions for real business impact.\n",
    "\n",
    "Let's start out by looking how many rides each of the bikes in our dataset have on them. This might give us an idea how much wear and tear these bikes have."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Number of rides per bike')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# q1\n",
    "# which bikes have been used the most?\n",
    "QUERY = (\n",
    "    \"\"\"\n",
    "    SELECT\n",
    "        COUNT(trip_id) AS num_trips, bike_number \n",
    "    FROM\n",
    "      `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips`\n",
    "    GROUP BY\n",
    "      bike_number\n",
    "    ORDER BY\n",
    "      num_trips DESC\n",
    "    \"\"\")\n",
    "\n",
    "\n",
    "ret_df = query_to_df(QUERY)\n",
    "plt.hist(ret_df.num_trips, bins = 20)\n",
    "plt.title(\"Number of rides per bike\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So here we see that the distribution is not normal, and looks like there's two different fundamental groups that we're dealing with. We have one group of bikes that is used less than about 1000 times, and another normal-ish looking distribution centered around 2750. It might be interesting to look at the differences between these two groups of bikes- maybe they tend to be found on different routes? Maybe they have less miles on them, but just many more frequent rides?\n",
    "\n",
    "We'll start off by looking at the differences between the average ride time between the many-rides group and the few-rides group."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Density/Frequency')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# q2\n",
    "# compare average ride times for bikes above/below 1500 bikes\n",
    "\n",
    "# high rides query\n",
    "q2_a = (\n",
    "    \"\"\"\n",
    "    SELECT\n",
    "        avg(duration_sec)/60 AS avg_trip_length_min, \n",
    "        COUNT(trip_id) AS num_trips,\n",
    "        bike_number \n",
    "    FROM\n",
    "        `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips`\n",
    "    GROUP BY\n",
    "        bike_number\n",
    "    HAVING\n",
    "        num_trips >= 1500\n",
    "    \"\"\")\n",
    "\n",
    "ret_df_a = query_to_df(q2_a)\n",
    "\n",
    "# low rides query\n",
    "q2_b = (\n",
    "    \"\"\"\n",
    "    SELECT\n",
    "        avg(duration_sec)/60 AS avg_trip_length_min,\n",
    "        COUNT(trip_id) AS num_trips,\n",
    "        bike_number\n",
    "    FROM\n",
    "        `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips`\n",
    "    GROUP BY\n",
    "        bike_number\n",
    "    HAVING\n",
    "        num_trips < 1500\n",
    "    \"\"\")\n",
    "\n",
    "ret_df_b = query_to_df(q2_b)\n",
    "\n",
    "# plot them on the same plot with density lines rather than histograms\n",
    "sns.distplot(ret_df_a['avg_trip_length_min'], hist = False, kde = True,\n",
    "            kde_kws = {'linewidth': 3},\n",
    "            label = \"High Number of Trips\")\n",
    "sns.distplot(ret_df_b['avg_trip_length_min'], hist = False, kde = True,\n",
    "            kde_kws = {'linewidth': 3},\n",
    "            label = \"Low Number of Trips\")\n",
    "plt.legend(prop={'size':10})\n",
    "plt.title(\"Comparing High Usage Bikes to Low Usage\")\n",
    "plt.xlabel(\"Average ridetime\")\n",
    "plt.ylabel(\"Density/Frequency\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So we can see that our bikes with lower number of trips have a higher variance around the average trip length, whereas the high usage bikes have much lower variance. This gives some evidence to our theory that perhaps the higher usage bikes are going on certain high-traffic routes (that presumably are around 17 minutes or so).\n",
    "\n",
    "Note that I used a density plot instead of comparing histograms. From a data visualization perspective, we want these plotted on the same axes to make this comparison easy to make. Doing overlapping histograms can get cluttered, so we opt instead for the density plot which comes across much cleaner with the same kind of takeaway as the histogram.\n",
    "\n",
    "In the query, we also use `HAVING` instead of `WHERE` since the condition is applied after our grouping aggregation.\n",
    "\n",
    "Interestingly, the overall mean of both of these appear to be the same. We'll calculate some basic statics below to confirm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg_trip_length_min</th>\n",
       "      <th>num_trips</th>\n",
       "      <th>bike_number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>358.000000</td>\n",
       "      <td>358.000000</td>\n",
       "      <td>358.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>16.171550</td>\n",
       "      <td>2665.849162</td>\n",
       "      <td>438.709497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.458857</td>\n",
       "      <td>409.004550</td>\n",
       "      <td>139.299144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>13.069868</td>\n",
       "      <td>1517.000000</td>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>14.866111</td>\n",
       "      <td>2469.750000</td>\n",
       "      <td>349.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>15.545687</td>\n",
       "      <td>2754.000000</td>\n",
       "      <td>447.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>16.481781</td>\n",
       "      <td>2947.000000</td>\n",
       "      <td>545.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>133.671334</td>\n",
       "      <td>3394.000000</td>\n",
       "      <td>878.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       avg_trip_length_min    num_trips  bike_number\n",
       "count           358.000000   358.000000   358.000000\n",
       "mean             16.171550  2665.849162   438.709497\n",
       "std               6.458857   409.004550   139.299144\n",
       "min              13.069868  1517.000000    16.000000\n",
       "25%              14.866111  2469.750000   349.250000\n",
       "50%              15.545687  2754.000000   447.500000\n",
       "75%              16.481781  2947.000000   545.500000\n",
       "max             133.671334  3394.000000   878.000000"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# high usage\n",
    "ret_df_a.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg_trip_length_min</th>\n",
       "      <th>num_trips</th>\n",
       "      <th>bike_number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3594.000000</td>\n",
       "      <td>3594.000000</td>\n",
       "      <td>3594.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>16.913051</td>\n",
       "      <td>276.306344</td>\n",
       "      <td>2152.675849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.593865</td>\n",
       "      <td>205.036652</td>\n",
       "      <td>1090.074206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.858333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>13.594331</td>\n",
       "      <td>114.250000</td>\n",
       "      <td>1276.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>15.837713</td>\n",
       "      <td>230.500000</td>\n",
       "      <td>2175.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>18.869190</td>\n",
       "      <td>416.000000</td>\n",
       "      <td>3076.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>86.211910</td>\n",
       "      <td>1471.000000</td>\n",
       "      <td>4073.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       avg_trip_length_min    num_trips  bike_number\n",
       "count          3594.000000  3594.000000  3594.000000\n",
       "mean             16.913051   276.306344  2152.675849\n",
       "std               5.593865   205.036652  1090.074206\n",
       "min               3.858333     1.000000     9.000000\n",
       "25%              13.594331   114.250000  1276.250000\n",
       "50%              15.837713   230.500000  2175.500000\n",
       "75%              18.869190   416.000000  3076.750000\n",
       "max              86.211910  1471.000000  4073.000000"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# low usage\n",
    "ret_df_b.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A few more things to note...\n",
    "\n",
    "* We have a lot more bikes in the low usage group compared to high usage group, by about 9x\n",
    "* The means are pretty close, but the standard deviations are less similar. The higher usage has a higher variance but lower mean.\n",
    "* We could run a t-test to see if the means are equal... with such large sample sizes we will likely come to the conclusion that they are in fact different. I'll skip over this for now.\n",
    "\n",
    "Let's take a look into the routes used and see if this explains the differences."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trips</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8749</td>\n",
       "      <td>50</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8168</td>\n",
       "      <td>69</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7281</td>\n",
       "      <td>61</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6601</td>\n",
       "      <td>50</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6568</td>\n",
       "      <td>65</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6557</td>\n",
       "      <td>60</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6065</td>\n",
       "      <td>51</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5930</td>\n",
       "      <td>70</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5790</td>\n",
       "      <td>74</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5714</td>\n",
       "      <td>74</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5597</td>\n",
       "      <td>55</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5159</td>\n",
       "      <td>50</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5113</td>\n",
       "      <td>65</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>5086</td>\n",
       "      <td>64</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>4977</td>\n",
       "      <td>70</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>4921</td>\n",
       "      <td>67</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4887</td>\n",
       "      <td>74</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>4804</td>\n",
       "      <td>77</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>4530</td>\n",
       "      <td>60</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>4318</td>\n",
       "      <td>69</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>4241</td>\n",
       "      <td>39</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4238</td>\n",
       "      <td>69</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4231</td>\n",
       "      <td>70</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>4150</td>\n",
       "      <td>70</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>4111</td>\n",
       "      <td>63</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    trips  start_station_id  end_station_id\n",
       "0    8749                50              60\n",
       "1    8168                69              65\n",
       "2    7281                61              50\n",
       "3    6601                50              61\n",
       "4    6568                65              69\n",
       "5    6557                60              74\n",
       "6    6065                51              70\n",
       "7    5930                70              50\n",
       "8    5790                74              61\n",
       "9    5714                74              70\n",
       "10   5597                55              70\n",
       "11   5159                50              70\n",
       "12   5113                65              70\n",
       "13   5086                64              77\n",
       "14   4977                70              55\n",
       "15   4921                67              69\n",
       "16   4887                74              60\n",
       "17   4804                77              64\n",
       "18   4530                60              50\n",
       "19   4318                69              39\n",
       "20   4241                39              69\n",
       "21   4238                69              57\n",
       "22   4231                70              51\n",
       "23   4150                70              74\n",
       "24   4111                63              70"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# routes for high usage\n",
    "# q3 \n",
    "# maybe there's a more effecient way, but this works\n",
    "q3_a = (\n",
    "    \"\"\"\n",
    "    SELECT \n",
    "        SUM(num_trips) as trips,\n",
    "        start_station_id,\n",
    "        end_station_id\n",
    "    FROM\n",
    "        (SELECT\n",
    "            COUNT(trip_id) AS num_trips,\n",
    "            start_station_id,\n",
    "            end_station_id,\n",
    "            bike_number\n",
    "         FROM\n",
    "            `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips`\n",
    "         WHERE\n",
    "            bike_number IN \n",
    "                (SELECT bike_number\n",
    "                 FROM\n",
    "                    (SELECT \n",
    "                     COUNT(trip_id) AS num_trips,\n",
    "                        bike_number\n",
    "                     FROM\n",
    "                        `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips`\n",
    "                     GROUP BY\n",
    "                        bike_number\n",
    "                     HAVING\n",
    "                        num_trips >= 1500\n",
    "                    )\n",
    "                )\n",
    "         GROUP BY\n",
    "            start_station_id, end_station_id, bike_number\n",
    "        )\n",
    "    GROUP BY\n",
    "        start_station_id, end_station_id\n",
    "    ORDER BY\n",
    "        trips DESC\n",
    "    LIMIT 25\n",
    "    \"\"\")\n",
    "\n",
    "high_vol_routes = query_to_df(q3_a)\n",
    "high_vol_routes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trips</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4930</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3758</td>\n",
       "      <td>28</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3444</td>\n",
       "      <td>27</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3129</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3096</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2872</td>\n",
       "      <td>6</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2716</td>\n",
       "      <td>81</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2469</td>\n",
       "      <td>32</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2468</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2277</td>\n",
       "      <td>15</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2216</td>\n",
       "      <td>28</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2127</td>\n",
       "      <td>16</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2098</td>\n",
       "      <td>182</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1870</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1841</td>\n",
       "      <td>196</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1825</td>\n",
       "      <td>58</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1734</td>\n",
       "      <td>195</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1677</td>\n",
       "      <td>29</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1671</td>\n",
       "      <td>31</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1659</td>\n",
       "      <td>22</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1627</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1606</td>\n",
       "      <td>17</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1604</td>\n",
       "      <td>30</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1571</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1562</td>\n",
       "      <td>45</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    trips  start_station_id  end_station_id\n",
       "0    4930                15               6\n",
       "1    3758                28              27\n",
       "2    3444                27              28\n",
       "3    3129                 4               2\n",
       "4    3096                 2               4\n",
       "5    2872                 6              16\n",
       "6    2716                81              15\n",
       "7    2469                32              28\n",
       "8    2468                 6              15\n",
       "9    2277                15              81\n",
       "10   2216                28              32\n",
       "11   2127                16               6\n",
       "12   2098               182             196\n",
       "13   1870                 6               6\n",
       "14   1841               196             182\n",
       "15   1825                58              67\n",
       "16   1734               195             182\n",
       "17   1677                29              31\n",
       "18   1671                31              29\n",
       "19   1659                22              30\n",
       "20   1627                 2               6\n",
       "21   1606                17              27\n",
       "22   1604                30              28\n",
       "23   1571                23              30\n",
       "24   1562                45              67"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# routes for low usage\n",
    "# q3 \n",
    "# maybe there's a more effecient way, but this works\n",
    "q3_b = (\n",
    "    \"\"\"\n",
    "    SELECT \n",
    "        SUM(num_trips) as trips,\n",
    "        start_station_id,\n",
    "        end_station_id\n",
    "    FROM\n",
    "        (SELECT\n",
    "            COUNT(trip_id) AS num_trips,\n",
    "            start_station_id,\n",
    "            end_station_id,\n",
    "            bike_number\n",
    "         FROM\n",
    "            `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips`\n",
    "         WHERE\n",
    "            bike_number IN \n",
    "                (SELECT bike_number\n",
    "                 FROM\n",
    "                    (SELECT \n",
    "                     COUNT(trip_id) AS num_trips,\n",
    "                        bike_number\n",
    "                     FROM\n",
    "                        `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips`\n",
    "                     GROUP BY\n",
    "                        bike_number\n",
    "                     HAVING\n",
    "                        num_trips < 1500\n",
    "                    )\n",
    "                )\n",
    "         GROUP BY\n",
    "            start_station_id, end_station_id, bike_number\n",
    "        )\n",
    "    GROUP BY\n",
    "        start_station_id, end_station_id\n",
    "    ORDER BY\n",
    "        trips DESC\n",
    "    LIMIT 25\n",
    "    \"\"\")\n",
    "\n",
    "low_vol_routes = query_to_df(q3_b)\n",
    "low_vol_routes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's do some pandas trickery now that we've gotten the data from our database as a comparison."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trips</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>route_coding</th>\n",
       "      <th>in_low</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8749</td>\n",
       "      <td>50</td>\n",
       "      <td>60</td>\n",
       "      <td>50_60</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8168</td>\n",
       "      <td>69</td>\n",
       "      <td>65</td>\n",
       "      <td>69_65</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7281</td>\n",
       "      <td>61</td>\n",
       "      <td>50</td>\n",
       "      <td>61_50</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6601</td>\n",
       "      <td>50</td>\n",
       "      <td>61</td>\n",
       "      <td>50_61</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6568</td>\n",
       "      <td>65</td>\n",
       "      <td>69</td>\n",
       "      <td>65_69</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6557</td>\n",
       "      <td>60</td>\n",
       "      <td>74</td>\n",
       "      <td>60_74</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6065</td>\n",
       "      <td>51</td>\n",
       "      <td>70</td>\n",
       "      <td>51_70</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5930</td>\n",
       "      <td>70</td>\n",
       "      <td>50</td>\n",
       "      <td>70_50</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5790</td>\n",
       "      <td>74</td>\n",
       "      <td>61</td>\n",
       "      <td>74_61</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5714</td>\n",
       "      <td>74</td>\n",
       "      <td>70</td>\n",
       "      <td>74_70</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5597</td>\n",
       "      <td>55</td>\n",
       "      <td>70</td>\n",
       "      <td>55_70</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5159</td>\n",
       "      <td>50</td>\n",
       "      <td>70</td>\n",
       "      <td>50_70</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5113</td>\n",
       "      <td>65</td>\n",
       "      <td>70</td>\n",
       "      <td>65_70</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>5086</td>\n",
       "      <td>64</td>\n",
       "      <td>77</td>\n",
       "      <td>64_77</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>4977</td>\n",
       "      <td>70</td>\n",
       "      <td>55</td>\n",
       "      <td>70_55</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>4921</td>\n",
       "      <td>67</td>\n",
       "      <td>69</td>\n",
       "      <td>67_69</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4887</td>\n",
       "      <td>74</td>\n",
       "      <td>60</td>\n",
       "      <td>74_60</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>4804</td>\n",
       "      <td>77</td>\n",
       "      <td>64</td>\n",
       "      <td>77_64</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>4530</td>\n",
       "      <td>60</td>\n",
       "      <td>50</td>\n",
       "      <td>60_50</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>4318</td>\n",
       "      <td>69</td>\n",
       "      <td>39</td>\n",
       "      <td>69_39</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>4241</td>\n",
       "      <td>39</td>\n",
       "      <td>69</td>\n",
       "      <td>39_69</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4238</td>\n",
       "      <td>69</td>\n",
       "      <td>57</td>\n",
       "      <td>69_57</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4231</td>\n",
       "      <td>70</td>\n",
       "      <td>51</td>\n",
       "      <td>70_51</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>4150</td>\n",
       "      <td>70</td>\n",
       "      <td>74</td>\n",
       "      <td>70_74</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>4111</td>\n",
       "      <td>63</td>\n",
       "      <td>70</td>\n",
       "      <td>63_70</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    trips  start_station_id  end_station_id route_coding  in_low\n",
       "0    8749                50              60        50_60   False\n",
       "1    8168                69              65        69_65   False\n",
       "2    7281                61              50        61_50   False\n",
       "3    6601                50              61        50_61   False\n",
       "4    6568                65              69        65_69   False\n",
       "5    6557                60              74        60_74   False\n",
       "6    6065                51              70        51_70   False\n",
       "7    5930                70              50        70_50   False\n",
       "8    5790                74              61        74_61   False\n",
       "9    5714                74              70        74_70   False\n",
       "10   5597                55              70        55_70   False\n",
       "11   5159                50              70        50_70   False\n",
       "12   5113                65              70        65_70   False\n",
       "13   5086                64              77        64_77   False\n",
       "14   4977                70              55        70_55   False\n",
       "15   4921                67              69        67_69   False\n",
       "16   4887                74              60        74_60   False\n",
       "17   4804                77              64        77_64   False\n",
       "18   4530                60              50        60_50   False\n",
       "19   4318                69              39        69_39   False\n",
       "20   4241                39              69        39_69   False\n",
       "21   4238                69              57        69_57   False\n",
       "22   4231                70              51        70_51   False\n",
       "23   4150                70              74        70_74   False\n",
       "24   4111                63              70        63_70   False"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "high_vol_routes['route_coding'] = high_vol_routes.start_station_id.astype(str) + \\\n",
    "    \"_\" + high_vol_routes.end_station_id.astype(str)\n",
    "low_vol_routes['route_coding'] = low_vol_routes.start_station_id.astype(str) + \\\n",
    "    \"_\" + low_vol_routes.end_station_id.astype(str)\n",
    "\n",
    "high_vol_routes['in_low'] = high_vol_routes['route_coding'].\\\n",
    "    isin({'route_coding': low_vol_routes.route_coding.values.tolist()})\n",
    "high_vol_routes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interestingly, none of the top 25 routes for the high volume bikes are in the top 25 low volume bike routes. While we could drill a bit deeper into this, with an initial analysis we see evidence that our bikes that have the most rides are fundamentally going on different routes for the higher volume bikes and lower volume bikes. This might be an interesting business result if the company is experiencing inequal wear and tear on the bikes- perhaps bikes from the lower volume routes could be moved to the higher ones and vice versa for more equal wear. Of course, more detailed analysis on a station-by-station level rather than route-level would be warranted in this case.\n",
    "\n",
    "Let's pivot a little more to looking at some of our customers and subscribers.\n",
    "\n",
    "I want to take a look at the cumulative minutes spent on bike rides by our subscribers vs customers on a month-by-month basis for 2015 (only year we have full data)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1b2edfb76d8>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# q4\n",
    "q4 = '''\n",
    "SELECT\n",
    "  SUM(customer_minutes_sum) OVER (ORDER BY end_month ROWS UNBOUNDED PRECEDING)/1000 as cumulative_minutes_cust,\n",
    "  SUM(subscriber_minutes_sum) OVER (ORDER BY end_month ROWS UNBOUNDED PRECEDING)/1000 as cumulative_minutes_sub,\n",
    "  end_year,\n",
    "  end_month\n",
    "FROM\n",
    "  (\n",
    "  SELECT\n",
    "    SUM(CASE WHEN subscriber_type = 'Customer' THEN duration_sec/60 ELSE NULL END) AS customer_minutes_sum,\n",
    "    SUM(CASE WHEN subscriber_type = 'Subscriber' THEN duration_sec/60 ELSE NULL END) AS subscriber_minutes_sum,\n",
    "    EXTRACT(YEAR FROM end_date) AS end_year,\n",
    "    EXTRACT(MONTH FROM end_date) AS end_month\n",
    "  FROM\n",
    "    `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips`\n",
    "  GROUP BY\n",
    "    end_year, end_month\n",
    "  HAVING\n",
    "    end_year = 2015\n",
    "  )\n",
    "ORDER BY\n",
    "  end_year, end_month\n",
    "'''\n",
    "df4 = query_to_df(q4)\n",
    "plt.plot(df4.end_month, df4.cumulative_minutes_cust, label = \"Customers\")\n",
    "plt.plot(df4.end_month, df4.cumulative_minutes_sub, label = \"Subscribers\")\n",
    "plt.title(\"Cumulative minutes ridden by users\")\n",
    "plt.xlabel(\"Month\")\n",
    "plt.ylabel(\"Cumulative Minutes (1000s)\")\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see a bit of an interesting phenomena here. Our subscribers, AKA our people that pay for longer-term memberships, are using the bikes at a decently consistent rate throughout the year. The customers, AKA people that don't intend to use the bikes that often (either a 3 day membership or single day) really use them a lot more in the summer, months 6 - 8. Overall, the subscribers will spend more time on the bikes over the year with their relatively more consistent usage.\n",
    "\n",
    "Let's change that query up slightly and look how the average ride length changes over months."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1b2ee025940>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "q5 = '''\n",
    "  SELECT\n",
    "    AVG(CASE WHEN subscriber_type = 'Customer' THEN duration_sec/60 ELSE NULL END) AS customer_minutes_avg,\n",
    "    AVG(CASE WHEN subscriber_type = 'Subscriber' THEN duration_sec/60 ELSE NULL END) AS subscriber_minutes_avg,\n",
    "    EXTRACT(YEAR FROM end_date) AS end_year,\n",
    "    EXTRACT(MONTH FROM end_date) AS end_month\n",
    "  FROM\n",
    "    `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips`\n",
    "  GROUP BY\n",
    "    end_year, end_month\n",
    "  HAVING\n",
    "    end_year = 2015\n",
    "  ORDER BY\n",
    "    end_year, end_month\n",
    "'''\n",
    "df5 = query_to_df(q5)\n",
    "plt.plot(df5.end_month, df5.customer_minutes_avg, label = \"Customers\")\n",
    "plt.plot(df5.end_month, df5.subscriber_minutes_avg, label = \"Subscribers\")\n",
    "plt.title(\"Average minutes ridden per trip\")\n",
    "plt.xlabel(\"Month\")\n",
    "plt.ylabel(\"Average ride length (min)\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This picture very clearly shows the phenomena that we showed with the other query- the average ride length skyrockets over the summer as presumably more casual customers find good weather to take longer bike rides. The subscribers are likely commuting for the most part, or at least keeping their habits very consistent. It's also interesting to note that the average ride length is much longer for the customers even without the spike, indicating again that it seems like the customers might use the bikes for leisure purposes much more than subscribers. Given the fact that the average is so much lower and the previous chart looks the way it did, we can infer that the volume of subscriber rides to customer rides is many times higher.\n",
    "\n",
    "To utilize data from multiple tables, we'll take a look at the origin stations popular with customers and subscribers and see if the capacities seem different for each."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cust_trips_mil</th>\n",
       "      <th>station</th>\n",
       "      <th>cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.561808e+15</td>\n",
       "      <td>6</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.394113e+15</td>\n",
       "      <td>15</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.276351e+14</td>\n",
       "      <td>3</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.868649e+14</td>\n",
       "      <td>60</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.781771e+14</td>\n",
       "      <td>70</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cust_trips_mil  station  cap\n",
       "0    1.561808e+15        6   23\n",
       "1    1.394113e+15       15   38\n",
       "2    8.276351e+14        3   35\n",
       "3    7.868649e+14       60   31\n",
       "4    7.781771e+14       70   31"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q6_cust = '''\n",
    "SELECT\n",
    "  SUM(CASE WHEN trips.subscriber_type = 'Customer' THEN trips.trip_id/1000000 ELSE NULL END) AS cust_trips_mil,\n",
    "  info.station_id AS station,\n",
    "  info.capacity AS cap\n",
    "FROM\n",
    "  `bigquery-public-data.san_francisco_bikeshare.bikeshare_station_info` AS info\n",
    "  INNER JOIN\n",
    "  `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips` AS trips\n",
    "  ON info.station_id = trips.start_station_id\n",
    "GROUP BY\n",
    "  station, cap\n",
    "ORDER BY\n",
    "  cust_trips_mil DESC\n",
    "LIMIT\n",
    "  25\n",
    "'''\n",
    "df6_cust = query_to_df(q6_cust)\n",
    "df6_cust.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sub_trips_mil</th>\n",
       "      <th>station</th>\n",
       "      <th>cap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.945897e+15</td>\n",
       "      <td>70</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.811147e+15</td>\n",
       "      <td>30</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.587979e+15</td>\n",
       "      <td>58</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.343885e+15</td>\n",
       "      <td>81</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.157456e+15</td>\n",
       "      <td>15</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sub_trips_mil  station  cap\n",
       "0   3.945897e+15       70   31\n",
       "1   3.811147e+15       30   19\n",
       "2   3.587979e+15       58   31\n",
       "3   3.343885e+15       81   35\n",
       "4   3.157456e+15       15   38"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q6_sub = '''\n",
    "SELECT\n",
    "  SUM(CASE WHEN trips.subscriber_type = 'Subscriber' THEN trips.trip_id/1000000 ELSE NULL END) AS sub_trips_mil,\n",
    "  info.station_id AS station,\n",
    "  info.capacity AS cap\n",
    "FROM\n",
    "  `bigquery-public-data.san_francisco_bikeshare.bikeshare_station_info` AS info\n",
    "  INNER JOIN\n",
    "  `bigquery-public-data.san_francisco_bikeshare.bikeshare_trips` AS trips\n",
    "  ON info.station_id = trips.start_station_id\n",
    "GROUP BY\n",
    "  station, cap\n",
    "ORDER BY\n",
    "  sub_trips_mil DESC\n",
    "LIMIT\n",
    "  25\n",
    "'''\n",
    "df6_sub = query_to_df(q6_sub)\n",
    "df6_sub.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Right away, we can see that the most frequent stations to start a trip for both subscribers and customers include station 70, indicating this must be an area that a lot of people go to in general. \n",
    "\n",
    "We'll take a look at the mean and standard deviation around each capacity in the 25 stations for both sides."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of top 25 customer stations capacity:\n",
      "29.2\n",
      "Standard Deviation of top 25 customer stations capacity:\n",
      "6.5482822174979605\n"
     ]
    }
   ],
   "source": [
    "mean_cust = np.mean(df6_cust.cap)\n",
    "sd_cust = np.std(df6_cust.cap)\n",
    "print(\"Mean of top 25 customer stations capacity:\")\n",
    "print(mean_cust)\n",
    "print(\"Standard Deviation of top 25 customer stations capacity:\")\n",
    "print(sd_cust)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of top 25 subscriber stations capacity:\n",
      "29.32\n",
      "Standard Deviation of top 25 subscriber stations capacity:\n",
      "6.024748957425528\n"
     ]
    }
   ],
   "source": [
    "mean_sub = np.mean(df6_sub.cap)\n",
    "sd_sub = np.std(df6_sub.cap)\n",
    "print(\"Mean of top 25 subscriber stations capacity:\")\n",
    "print(mean_sub)\n",
    "print(\"Standard Deviation of top 25 subscriber stations capacity:\")\n",
    "print(sd_sub)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We don't really see a big difference here. We might look into doing some kind of weighted comparison approach and/or hypothesis test in the future to dig into this in the future, but we'll leave the analysis here for now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
